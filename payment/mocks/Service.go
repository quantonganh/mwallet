// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mwallet "github.com/quantonganh/mwallet"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Find provides a mock function with given fields: accountID
func (_m *Service) Find(accountID string) ([]*mwallet.Payment, error) {
	ret := _m.Called(accountID)

	var r0 []*mwallet.Payment
	if rf, ok := ret.Get(0).(func(string) []*mwallet.Payment); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mwallet.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *Service) List() ([]*mwallet.Payment, error) {
	ret := _m.Called()

	var r0 []*mwallet.Payment
	if rf, ok := ret.Get(0).(func() []*mwallet.Payment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mwallet.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: fromAccountID, toAccountID, amount
func (_m *Service) Send(fromAccountID string, toAccountID string, amount float64) error {
	ret := _m.Called(fromAccountID, toAccountID, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64) error); ok {
		r0 = rf(fromAccountID, toAccountID, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mwallet "github.com/quantonganh/mwallet"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddAccount provides a mock function with given fields: _a0
func (_m *Service) AddAccount(_a0 *mwallet.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mwallet.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccount provides a mock function with given fields: id
func (_m *Service) DeleteAccount(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: id
func (_m *Service) GetAccount(id string) (*mwallet.Account, error) {
	ret := _m.Called(id)

	var r0 *mwallet.Account
	if rf, ok := ret.Get(0).(func(string) *mwallet.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwallet.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccounts provides a mock function with given fields:
func (_m *Service) ListAccounts() ([]*mwallet.Account, error) {
	ret := _m.Called()

	var r0 []*mwallet.Account
	if rf, ok := ret.Get(0).(func() []*mwallet.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mwallet.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
